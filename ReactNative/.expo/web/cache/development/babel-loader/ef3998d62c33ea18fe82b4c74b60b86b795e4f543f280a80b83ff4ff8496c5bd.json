{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useEffect, useMemo } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { gestureHandlerRootHOC, GestureHandlerRootView, PanGestureHandler, State } from 'react-native-gesture-handler';\nimport useUtils from \"./components/utils\";\nimport Svg, { Path } from 'react-native-svg';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar osRtl = I18nManager.isRTL;\nvar SMALL_SIZE = 24;\nvar MEDIUM_SIZE = 34;\nvar LARGE_SIZE = 44;\nexport var Slider = gestureHandlerRootHOC(function (_ref) {\n  var min = _ref.min,\n    max = _ref.max,\n    valueOnChange = _ref.valueOnChange,\n    _ref$step = _ref.step,\n    step = _ref$step === void 0 ? 1 : _ref$step,\n    _ref$styleSize = _ref.styleSize,\n    styleSize = _ref$styleSize === void 0 ? 'medium' : _ref$styleSize,\n    _ref$knobColor = _ref.knobColor,\n    knobColor = _ref$knobColor === void 0 ? '#00a2ff' : _ref$knobColor,\n    _ref$inRangeBarColor = _ref.inRangeBarColor,\n    inRangeBarColor = _ref$inRangeBarColor === void 0 ? 'rgb(200,200,200)' : _ref$inRangeBarColor,\n    _ref$outOfRangeBarCol = _ref.outOfRangeBarColor,\n    outOfRangeBarColor = _ref$outOfRangeBarCol === void 0 ? 'rgb(100,100,100)' : _ref$outOfRangeBarCol,\n    _ref$knobBubbleTextSt = _ref.knobBubbleTextStyle,\n    knobBubbleTextStyle = _ref$knobBubbleTextSt === void 0 ? {} : _ref$knobBubbleTextSt,\n    _ref$valueLabelsBackg = _ref.valueLabelsBackgroundColor,\n    valueLabelsBackgroundColor = _ref$valueLabelsBackg === void 0 ? '#3a4766' : _ref$valueLabelsBackg,\n    _ref$rangeLabelsTextC = _ref.rangeLabelsTextColor,\n    rangeLabelsTextColor = _ref$rangeLabelsTextC === void 0 ? 'rgb(60,60,60)' : _ref$rangeLabelsTextC,\n    _ref$showRangeLabels = _ref.showRangeLabels,\n    showRangeLabels = _ref$showRangeLabels === void 0 ? true : _ref$showRangeLabels,\n    _ref$showValueLabels = _ref.showValueLabels,\n    showValueLabels = _ref$showValueLabels === void 0 ? true : _ref$showValueLabels,\n    initialValue = _ref.initialValue,\n    _ref$containerStyle = _ref.containerStyle,\n    customContainerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle,\n    labelFormatter = _ref.labelFormatter;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    stepInPixels = _useState2[0],\n    setStepInPixels = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    knobSize = _useState4[0],\n    setknobSize = _useState4[1];\n  var _useState5 = useState(15),\n    _useState6 = _slicedToArray(_useState5, 1),\n    fontSize = _useState6[0];\n  var _useState7 = useState('row'),\n    _useState8 = _slicedToArray(_useState7, 2),\n    flexDirection = _useState8[0],\n    setFlexDirection = _useState8[1];\n  var _useState9 = useState({\n      left: (knobSize - 40) / 2\n    }),\n    _useState10 = _slicedToArray(_useState9, 2),\n    svgOffset = _useState10[0],\n    setSvgOffset = _useState10[1];\n  var _useState11 = useState(0),\n    _useState12 = _slicedToArray(_useState11, 2),\n    valueOffset = _useState12[0],\n    setValueOffset = _useState12[1];\n  var _useState13 = useState(0),\n    _useState14 = _slicedToArray(_useState13, 2),\n    sliderWidth = _useState14[0],\n    setSliderWidth = _useState14[1];\n  var _useState15 = useState(new Animated.Value(0)),\n    _useState16 = _slicedToArray(_useState15, 1),\n    translateX = _useState16[0];\n  var _useState17 = useState(new Animated.Value(0.01)),\n    _useState18 = _slicedToArray(_useState17, 1),\n    valueLabelScale = _useState18[0];\n  var _useState19 = useState(new Animated.Value(0.01)),\n    _useState20 = _slicedToArray(_useState19, 1),\n    inRangeScaleX = _useState20[0];\n  var valueTextRef = React.createRef();\n  var opacity = React.useRef(new Animated.Value(0)).current;\n  var _useUtils = useUtils({\n      step: step,\n      labelFormatter: labelFormatter\n    }),\n    decimalRound = _useUtils.decimalRound,\n    formatLabel = _useUtils.formatLabel;\n  useEffect(function () {\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n    setSvgOffset(osRtl ? {\n      right: (knobSize - 40) / 2\n    } : {\n      left: (knobSize - 40) / 2\n    });\n  }, [knobSize]);\n  useEffect(function () {\n    if (sliderWidth > 0) {\n      var _valueTextRef$current;\n      var stepSize = setStepSize(max, min, step);\n      (_valueTextRef$current = valueTextRef.current) == null ? void 0 : _valueTextRef$current.setNativeProps({\n        text: formatLabel(min)\n      });\n      if (typeof initialValue === 'number' && initialValue >= min && initialValue <= max) {\n        var offset = (initialValue - min) / step * stepSize - knobSize / 2;\n        setValueStatic(offset, knobSize, stepSize);\n        setValueText(offset);\n      }\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialValue, sliderWidth]);\n  useEffect(function () {\n    var size = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    setknobSize(size);\n    translateX.setValue(-size / 4);\n  }, [styleSize]);\n  var setValueStatic = function setValueStatic(newOffset, knobSize, stepInPixels) {\n    newOffset = Math.round((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    settingValue(newOffset);\n    setValueOffset(newOffset);\n    var changeTo = Math.round((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n    valueOnChange(decimalRound(changeTo));\n  };\n  var settingValue = function settingValue(newOffset) {\n    translateX.setValue(newOffset);\n    inRangeScaleX.setValue((newOffset + knobSize / 2) / sliderWidth + 0.01);\n  };\n  var setValueText = function setValueText(totalOffset) {\n    var _valueTextRef$current2;\n    var numericValue = Math.floor((totalOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n    var text = formatLabel(numericValue);\n    (_valueTextRef$current2 = valueTextRef.current) == null ? void 0 : _valueTextRef$current2.setNativeProps({\n      text: text\n    });\n  };\n  var setStepSize = function setStepSize(max, min, step) {\n    var numberOfSteps = (max - min) / step;\n    var stepSize = sliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  };\n  var onGestureEvent = function onGestureEvent(event) {\n    var totalOffset = event.nativeEvent.translationX + valueOffset;\n    if (totalOffset >= -knobSize / 2 && totalOffset <= sliderWidth - knobSize / 2) {\n      translateX.setValue(totalOffset);\n      if (valueTextRef != null) {\n        var _valueTextRef$current3;\n        var labelValue = Math.round((totalOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n        (_valueTextRef$current3 = valueTextRef.current) == null ? void 0 : _valueTextRef$current3.setNativeProps({\n          text: formatLabel(labelValue)\n        });\n      }\n      inRangeScaleX.setValue((totalOffset + knobSize / 2) / sliderWidth + 0.01);\n    }\n  };\n  var onHandlerStateChange = function onHandlerStateChange(event) {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(valueLabelScale, 1);\n    }\n    if (event.nativeEvent.state === State.END) {\n      var newOffset = event.nativeEvent.translationX + valueOffset;\n      newOffset = Math.round((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= sliderWidth - knobSize / 2) {\n        newOffset = sliderWidth - knobSize / 2;\n      }\n      setValueStatic(newOffset, knobSize, stepInPixels);\n      scaleTo(valueLabelScale, 0.01);\n    }\n  };\n  var scaleTo = function scaleTo(param, toValue) {\n    return Animated.timing(param, {\n      toValue: toValue,\n      duration: 150,\n      useNativeDriver: true\n    }).start();\n  };\n  var onLayout = function onLayout(event) {\n    setSliderWidth(event.nativeEvent.layout.width);\n  };\n  var padding = useMemo(function () {\n    return styleSize === 'large' ? 17 : styleSize === 'medium' ? 24 : 31;\n  }, [styleSize]);\n  return _jsx(GestureHandlerRootView, {\n    children: _jsxs(Animated.View, {\n      style: [styles.container, {\n        opacity: opacity,\n        padding: padding\n      }, customContainerStyle],\n      children: [showValueLabels && _jsx(View, {\n        style: {\n          width: '100%',\n          height: 1,\n          flexDirection: flexDirection\n        },\n        children: _jsxs(Animated.View, {\n          style: {\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n            transform: [{\n              translateX: translateX\n            }, {\n              scale: valueLabelScale\n            }]\n          },\n          children: [_jsx(Svg, {\n            width: 40,\n            height: 56,\n            style: _objectSpread(_objectSpread({}, svgOffset), {}, {\n              justifyContent: 'center',\n              alignItems: 'center'\n            }),\n            children: _jsx(Path, {\n              d: \"M20.368027196163986,55.24077513402203 C20.368027196163986,55.00364778429386 37.12897994729114,42.11537830086061 39.19501224411266,22.754628132990383 C41.26104454093417,3.393877965120147 24.647119286738516,0.571820003300814 20.368027196163986,0.7019902620266703 C16.088935105589453,0.8321519518460209 -0.40167016290734386,3.5393865664909434 0.7742997013327574,21.806127302984205 C1.950269565572857,40.07286803947746 20.368027196163986,55.4779024837502 20.368027196163986,55.24077513402203 z\",\n              strokeWidth: 1,\n              fill: valueLabelsBackgroundColor,\n              stroke: valueLabelsBackgroundColor\n            })\n          }), _jsx(TextInput, {\n            style: [styles.knobBubbleText, svgOffset, knobBubbleTextStyle],\n            ref: valueTextRef\n          })]\n        })\n      }), _jsxs(View, {\n        style: {\n          width: '100%',\n          height: knobSize,\n          marginVertical: 4,\n          position: 'relative',\n          flexDirection: flexDirection,\n          alignItems: 'center'\n        },\n        children: [_jsx(View, {\n          style: [styles.bar, {\n            backgroundColor: inRangeBarColor,\n            left: knobSize / 4,\n            marginLeft: -knobSize / 4,\n            right: knobSize / 4,\n            height: knobSize / 3\n          }],\n          onLayout: onLayout\n        }), _jsx(Animated.View, {\n          style: {\n            width: sliderWidth,\n            height: knobSize / 3,\n            backgroundColor: outOfRangeBarColor,\n            transform: [{\n              translateX: -sliderWidth / 2\n            }, {\n              scaleX: inRangeScaleX\n            }, {\n              translateX: sliderWidth / 2\n            }]\n          }\n        }), _jsx(Animated.View, {\n          style: {\n            position: 'absolute',\n            left: -knobSize / 4,\n            width: knobSize / 2.5,\n            height: knobSize / 3,\n            borderRadius: knobSize / 3,\n            backgroundColor: outOfRangeBarColor\n          }\n        }), _jsx(PanGestureHandler, {\n          onGestureEvent: onGestureEvent,\n          onHandlerStateChange: onHandlerStateChange,\n          children: _jsx(Animated.View, {\n            style: [styles.knob, {\n              height: knobSize,\n              width: knobSize,\n              borderRadius: knobSize,\n              backgroundColor: knobColor,\n              transform: [{\n                translateX: translateX\n              }]\n            }]\n          })\n        })]\n      }), showRangeLabels && _jsxs(View, {\n        style: {\n          width: '100%',\n          flexDirection: flexDirection,\n          justifyContent: 'space-between'\n        },\n        children: [_jsx(Text, {\n          style: {\n            color: rangeLabelsTextColor,\n            fontWeight: \"bold\",\n            fontSize: fontSize,\n            marginLeft: -7\n          },\n          children: min\n        }), _jsx(Text, {\n          style: {\n            color: rangeLabelsTextColor,\n            fontWeight: \"bold\",\n            fontSize: fontSize,\n            marginRight: 7\n          },\n          children: max\n        })]\n      })]\n    })\n  });\n});\nvar styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  },\n  bar: {\n    position: 'absolute',\n    borderBottomRightRadius: 100,\n    borderTopRightRadius: 100\n  },\n  knobBubbleText: {\n    position: 'absolute',\n    width: 40,\n    textAlign: 'center',\n    bottom: 25,\n    fontWeight: 'bold',\n    color: 'white'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","useMemo","Animated","StyleSheet","View","Text","TextInput","I18nManager","gestureHandlerRootHOC","GestureHandlerRootView","PanGestureHandler","State","useUtils","Svg","Path","jsx","_jsx","jsxs","_jsxs","osRtl","isRTL","SMALL_SIZE","MEDIUM_SIZE","LARGE_SIZE","Slider","_ref","min","max","valueOnChange","_ref$step","step","_ref$styleSize","styleSize","_ref$knobColor","knobColor","_ref$inRangeBarColor","inRangeBarColor","_ref$outOfRangeBarCol","outOfRangeBarColor","_ref$knobBubbleTextSt","knobBubbleTextStyle","_ref$valueLabelsBackg","valueLabelsBackgroundColor","_ref$rangeLabelsTextC","rangeLabelsTextColor","_ref$showRangeLabels","showRangeLabels","_ref$showValueLabels","showValueLabels","initialValue","_ref$containerStyle","containerStyle","customContainerStyle","labelFormatter","_useState","_useState2","_slicedToArray","stepInPixels","setStepInPixels","_useState3","_useState4","knobSize","setknobSize","_useState5","_useState6","fontSize","_useState7","_useState8","flexDirection","setFlexDirection","_useState9","left","_useState10","svgOffset","setSvgOffset","_useState11","_useState12","valueOffset","setValueOffset","_useState13","_useState14","sliderWidth","setSliderWidth","_useState15","Value","_useState16","translateX","_useState17","_useState18","valueLabelScale","_useState19","_useState20","inRangeScaleX","valueTextRef","createRef","opacity","useRef","current","_useUtils","decimalRound","formatLabel","right","_valueTextRef$current","stepSize","setStepSize","setNativeProps","text","offset","setValueStatic","setValueText","timing","toValue","duration","useNativeDriver","start","size","setValue","newOffset","Math","round","settingValue","changeTo","totalOffset","_valueTextRef$current2","numericValue","floor","numberOfSteps","onGestureEvent","event","nativeEvent","translationX","_valueTextRef$current3","labelValue","onHandlerStateChange","state","BEGAN","scaleTo","END","param","onLayout","layout","width","padding","children","style","styles","container","height","position","bottom","transform","scale","_objectSpread","justifyContent","alignItems","d","strokeWidth","fill","stroke","knobBubbleText","ref","marginVertical","bar","backgroundColor","marginLeft","scaleX","borderRadius","knob","color","fontWeight","marginRight","create","elevation","borderBottomRightRadius","borderTopRightRadius","textAlign"],"sources":["/home/aqib/projects/finals_code/RN-HomeService/node_modules/react-native-range-slider-expo/src/Slider.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Animated, StyleSheet, View, LayoutChangeEvent, Text, TextInput, I18nManager, ViewStyle, TextStyle } from 'react-native';\nimport { gestureHandlerRootHOC, GestureHandlerRootView, PanGestureHandler, PanGestureHandlerGestureEvent, State } from 'react-native-gesture-handler';\nimport useUtils from './components/utils';\nimport Svg, { Path } from 'react-native-svg';\n\nconst osRtl = I18nManager.isRTL;\n\nconst SMALL_SIZE = 24;\nconst MEDIUM_SIZE = 34;\nconst LARGE_SIZE = 44;\n\ninterface SliderProps {\n    min: number,\n    max: number,\n    valueOnChange: (value: number) => void,\n    step?: number,\n    styleSize?: 'small' | 'medium' | 'large' | number,\n    knobColor?: string,\n    inRangeBarColor?: string,\n    outOfRangeBarColor?: string,\n    valueLabelsTextColor?: string,\n    valueLabelsBackgroundColor?: string,\n    rangeLabelsTextColor?: string,\n    showRangeLabels?: boolean,\n    showValueLabels?: boolean,\n    initialValue?: number,\n    containerStyle?: ViewStyle,\n    knobBubbleTextStyle?: TextStyle,\n    labelFormatter?: (value: number) => string,\n  }\n\nexport const Slider = gestureHandlerRootHOC(({\n    min, max, valueOnChange,\n    step = 1,\n    styleSize = 'medium',\n    knobColor = '#00a2ff',\n    inRangeBarColor = 'rgb(200,200,200)',\n    outOfRangeBarColor = 'rgb(100,100,100)',\n    knobBubbleTextStyle = {},\n    valueLabelsBackgroundColor = '#3a4766',\n    rangeLabelsTextColor = 'rgb(60,60,60)',\n    showRangeLabels = true,\n    showValueLabels = true,\n    initialValue,\n    containerStyle: customContainerStyle = {},\n    labelFormatter,\n}: SliderProps) => {\n\n    // settings\n    const [stepInPixels, setStepInPixels] = useState(0);\n    const [knobSize, setknobSize] = useState(0);\n    const [fontSize] = useState(15);\n\n    // rtl settings\n    const [flexDirection, setFlexDirection] = useState<\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\" | undefined>('row');\n    const [svgOffset, setSvgOffset] = useState<object>({ left: (knobSize - 40) / 2 });\n\n    const [valueOffset, setValueOffset] = useState(0);\n    const [sliderWidth, setSliderWidth] = useState(0);\n\n    // animation values\n    const [translateX] = useState(new Animated.Value(0));\n    const [valueLabelScale] = useState(new Animated.Value(0.01));\n    const [inRangeScaleX] = useState(new Animated.Value(0.01));\n\n    // refs\n    const valueTextRef = React.createRef<TextInput>();\n    const opacity = React.useRef<Animated.Value>(new Animated.Value(0)).current;\n\n  const {decimalRound, formatLabel} = useUtils({step, labelFormatter});\n\n    // initalizing settings\n    useEffect(() => {\n        setFlexDirection(osRtl ? 'row-reverse' : 'row');\n        setSvgOffset(osRtl ? { right: (knobSize - 40) / 2 } : { left: (knobSize - 40) / 2 });\n    }, [knobSize]);\n\n    useEffect(() => {\n        if (sliderWidth > 0) {\n            const stepSize = setStepSize(max, min, step);\n            valueTextRef.current?.setNativeProps({ text: formatLabel(min) });\n            if (typeof initialValue === 'number' && initialValue >= min && initialValue <= max) {\n                const offset = ((initialValue - min) / step) * stepSize - (knobSize / 2);\n                setValueStatic(offset, knobSize, stepSize);\n                setValueText(offset);\n            }\n            Animated.timing(opacity, {\n                toValue: 1,\n                duration: 64,\n                useNativeDriver: true\n            }).start();\n        }\n    }, [min, max, step, initialValue, sliderWidth]);\n    \n    useEffect(() => {\n        const size = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n        setknobSize(size);\n        translateX.setValue(-size / 4);\n    }, [styleSize]);\n\n    const setValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\n        newOffset = Math.round((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n        settingValue(newOffset);\n        setValueOffset(newOffset);\n        const changeTo = Math.round(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n        valueOnChange(decimalRound(changeTo));\n    }\n    const settingValue = (newOffset: number) => {\n        translateX.setValue(newOffset);\n        inRangeScaleX.setValue((newOffset + (knobSize / 2)) / sliderWidth + 0.01);\n    }\n    const setValueText = (totalOffset: number) => {\n        const numericValue: number = Math.floor(((totalOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n        const text = formatLabel(numericValue);\n        valueTextRef.current?.setNativeProps({ text });\n    }\n    const setStepSize = (max: number, min: number, step: number) => {\n        const numberOfSteps = ((max - min) / step);\n        const stepSize = sliderWidth / numberOfSteps;\n        setStepInPixels(stepSize);\n        return stepSize;\n    }\n\n    // value gesture events ------------------------------------------------------------------------\n    const onGestureEvent = (event: PanGestureHandlerGestureEvent) => {\n        let totalOffset = event.nativeEvent.translationX + valueOffset;\n        if (totalOffset >= - knobSize / 2 && totalOffset <= sliderWidth - knobSize / 2) {\n            translateX.setValue(totalOffset);\n            if (valueTextRef != null) {\n              const labelValue = Math.round(((totalOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n              valueTextRef.current?.setNativeProps({ text: formatLabel(labelValue) });\n            }\n            inRangeScaleX.setValue((totalOffset + (knobSize / 2)) / sliderWidth + 0.01);\n        }\n    }\n    const onHandlerStateChange = (event: PanGestureHandlerGestureEvent) => {\n        if (event.nativeEvent.state === State.BEGAN) {\n            scaleTo(valueLabelScale, 1);\n        }\n        if (event.nativeEvent.state === State.END) {\n            let newOffset = event.nativeEvent.translationX + valueOffset;\n            newOffset = Math.round((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n            if (newOffset < -knobSize / 2) {\n                newOffset = -knobSize / 2;\n            } else if (newOffset >= sliderWidth - knobSize / 2) {\n                newOffset = sliderWidth - knobSize / 2;\n            }\n            setValueStatic(newOffset, knobSize, stepInPixels);\n            scaleTo(valueLabelScale, 0.01);\n        }\n    }\n    // ------------------------------------------------------------------------------------------------\n\n    // gesture events help functions ------------------------------------------------------------------\n    const scaleTo = (param: Animated.Value, toValue: number) => Animated.timing(param,\n        {\n            toValue,\n            duration: 150,\n            useNativeDriver: true\n        }\n    ).start();\n    // ------------------------------------------------------------------------------------------------\n\n    // setting bar width ------------------------------------------------------------------------------\n    const onLayout = (event: LayoutChangeEvent) => {\n        setSliderWidth(event.nativeEvent.layout.width);\n    }\n    // ------------------------------------------------------------------------------------------------\n\n    const padding = useMemo(() => styleSize === 'large' ? 17 : styleSize === 'medium' ? 24 : 31, [styleSize]);\n\n    return (\n    <GestureHandlerRootView>\n      <Animated.View style={[styles.container, { opacity, padding }, customContainerStyle]}>\n            {\n                showValueLabels &&\n                <View style={{ width: '100%', height: 1, flexDirection }}>\n                    <Animated.View\n                        style={{ position: 'absolute', bottom: 0, left: 0, transform: [{ translateX }, { scale: valueLabelScale }] }}\n                    >\n                        <Svg width={40} height={56} style={{ ...svgOffset, justifyContent: 'center', alignItems: 'center' }} >\n                            <Path\n                                d=\"M20.368027196163986,55.24077513402203 C20.368027196163986,55.00364778429386 37.12897994729114,42.11537830086061 39.19501224411266,22.754628132990383 C41.26104454093417,3.393877965120147 24.647119286738516,0.571820003300814 20.368027196163986,0.7019902620266703 C16.088935105589453,0.8321519518460209 -0.40167016290734386,3.5393865664909434 0.7742997013327574,21.806127302984205 C1.950269565572857,40.07286803947746 20.368027196163986,55.4779024837502 20.368027196163986,55.24077513402203 z\"\n                                strokeWidth={1}\n                                fill={valueLabelsBackgroundColor}\n                                stroke={valueLabelsBackgroundColor}\n                            />\n                        </Svg>\n                        <TextInput style={[styles.knobBubbleText, svgOffset, knobBubbleTextStyle]} ref={valueTextRef} />\n                    </Animated.View>\n                </View>\n            }\n            <View style={{ width: '100%', height: knobSize, marginVertical: 4, position: 'relative', flexDirection, alignItems: 'center' }}>\n                <View style={[styles.bar, { backgroundColor: inRangeBarColor, left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: knobSize / 3 }]} onLayout={onLayout} />\n                <Animated.View style={{ width: sliderWidth, height: knobSize / 3, backgroundColor: outOfRangeBarColor, transform: [{ translateX: -sliderWidth / 2 }, { scaleX: inRangeScaleX }, { translateX: sliderWidth / 2 }] }} />\n                <Animated.View style={{ position: 'absolute', left: -knobSize / 4, width: knobSize / 2.5, height: knobSize / 3, borderRadius: knobSize / 3, backgroundColor: outOfRangeBarColor }} />\n                <PanGestureHandler {...{ onGestureEvent, onHandlerStateChange }}>\n                    <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: knobColor, transform: [{ translateX }] }]} />\n                </PanGestureHandler>\n            </View>\n            {\n                showRangeLabels &&\n                <View style={{ width: '100%', flexDirection, justifyContent: 'space-between' }}>\n                    <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize, marginLeft: -7 }}>{min}</Text>\n                    <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize, marginRight: 7 }}>{max}</Text>\n                </View>\n            }\n        </Animated.View>\n    </GestureHandlerRootView>\n    );\n});\n\nconst styles = StyleSheet.create({\n    container: {\n        height: 100,\n        width: '100%'\n    },\n    knob: {\n        position: 'absolute',\n        elevation: 4\n    },\n    bar: {\n        position: 'absolute',\n        borderBottomRightRadius: 100,\n        borderTopRightRadius: 100\n    },\n    knobBubbleText: { \n      position: 'absolute', \n      width: 40, \n      textAlign: 'center',  \n      bottom: 25, \n      fontWeight: 'bold',\n      color: 'white'\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}